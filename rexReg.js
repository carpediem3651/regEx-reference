/**
 * 정규 표현식 처리
 * -- 새로 입력된 코드를 적용시키기 위해서 F5 누르면 안되고 Ctrl + F5를 눌려야만한다.
 */
 
 // const - 상수 변수 선언
 // 숫자(\d)만 1개 이상 계속 반복되는 데이터 패턴
 const reg_digit = /^\d+$/;
 const reg_digit_error_msg = "숫자만 입력하셔야 합니다.";
 
 //         년도: 앞에 19xx,20xx -월 : 01~09|10~12 -일: 01~09|10~19|20~29|30~31 
 const reg_date = /^(19|20)\d{2}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/;
 const reg_date_error_msg = "날짜형식은 YYYY-MM-DD로 작성하셔야 합니다. 숫자와 '-'만 입력 가능합니다.";
 
 // 아이디 패턴 - 첫 영문자. 뒤에는 영숫자. 4자~20자 사이
 const reg_id = /^[a-zA-Z][a-zA-Z0-9]{3,19}$/;
 const reg_id_error_msg
  = "ID는 영문자로 시작하고 뒤에는 영숫자를 사용합니다. 4~20자 길이 제한 입력하셔야합니다.";
 
 // 연락 패턴 - 국번(또는 핸드폰 앞자리) : xx|xxx 숫자 - xxx|xxxx - xxxx 숫자
 // const reg_tel = /^0[0-9]{1,2}$/;
 const reg_tel = /^0(2|10|[1-9]{2})-[0-9]{3,4}-[0-9]{4}$/;
 const reg_tel_error_msg
  = "전화번호는 숫자만 사용가능하고 (02 또는 xxx)-(xxx 또는 xxxx)-xxxx 패턴으로 입력하셔합니다.";
 
 // 이메일 패턴 - 영숫자로 시작하고 영문자 사이에 -, _, .을 한개 사용가능하다. 중간에 @이 있어야하고 
 // @ 뒤에는 도메인으로 작성하는데 영숫자로 시작하고 xxxx.xx.xx
 const reg_email = /^[0-9a-zA-Z]([-_\.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_\.]?[0-9a-zA-Z])*\.[a-zA-Z]{2,3}$/i;
 const reg_email_error_msg
  = "이메일은 영숫자로 시작하고 중간에 @ 가 있어야 하고 @ 뒤에 도메인을 넣어야 합니다.(예:test@naver.com)";
 
 // 한글이름 패턴 - 한글 2자에서 10까지 
 const reg_name = /^[가-힣]{2,10}$/;
 const reg_name_error_msg
  = "이름은 한글로 2자부터 10자까지만 사용할 수 있습니다. 한글은 자음 과 모음가 있어야 합니다.";
 
 // 제목 - 한글로 100자이내(다른 문자도 입력 가능)
 // -> DB-300 바이트(100자이내) 4자이상 앞 뒤 공백문자는 허용하지 않는다.(제거해서 처리)
 const reg_title = /^.{4,100}$/;
 const reg_title_error_msg
  = "제목은 앞/뒤 공백을 허용하지 않고 4자이상 100자 이내로 작성하셔야 합니다.";
 
 // 내용 - 줄바꿈(\n)과 공백문자를 다 지우고(" " -> "", \n->"") 4자 이상 체크를 먼저 진행한다.
 // -> 정규 표현식
 // . 전체 문자 - 줄바꿈은 포함하지 않는다.
 const reg_content = /^(.|\n){4,670}$/;
 const reg_content_error_msg
  = "내용은 4자이상 670자 이내로 작성하셔야합니다.";
 
 // 비밀번호 - 글자이면서 4자이상 20자 이내
 const reg_pw = /^.{4,20}$/;
 const reg_pw_error_msg
  = "비밀번호는 4자이상 20자 이내로 작성하셔야 합니다.";
 
 // 정규 표현식을 검사하는 함수.
 // test(위에 정규표현식 변수, 검사한 문자열, 위에 오류인 경우 경고창내용)
 function test(reg, str, err_msg){
	// alert(reg + ", " + str);
	// 패턴에 맞지 않는 경우의 처리
	if(!reg.test(str)){
		// 에러 경고 창 띄우기
		alert(err_msg);
		// 호출한 쪽에 오류라고 false를 리턴해 준다.
		return false;
	}
	// 오류가 없는 경우 true를 리턴해 준다.(안해 주면 false와 같이 동작한다.)
	return true;
}
